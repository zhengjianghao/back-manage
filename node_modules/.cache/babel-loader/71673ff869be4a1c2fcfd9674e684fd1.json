{"ast":null,"code":"import _extends from \"babel-runtime/helpers/extends\";\nimport _classCallCheck from \"babel-runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"babel-runtime/helpers/possibleConstructorReturn\";\nimport _inherits from \"babel-runtime/helpers/inherits\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nvar LazyRenderBox = function (_React$Component) {\n  _inherits(LazyRenderBox, _React$Component);\n  function LazyRenderBox() {\n    _classCallCheck(this, LazyRenderBox);\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n  LazyRenderBox.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    if (nextProps.forceRender) {\n      return true;\n    }\n    return !!nextProps.hiddenClassName || !!nextProps.visible;\n  };\n  LazyRenderBox.prototype.render = function render() {\n    var _a = this.props,\n      className = _a.className,\n      hiddenClassName = _a.hiddenClassName,\n      visible = _a.visible,\n      forceRender = _a.forceRender,\n      restProps = __rest(_a, [\"className\", \"hiddenClassName\", \"visible\", \"forceRender\"]);\n    var useClassName = className;\n    if (!!hiddenClassName && !visible) {\n      useClassName += \" \" + hiddenClassName;\n    }\n    return React.createElement(\"div\", _extends({}, restProps, {\n      className: useClassName\n    }));\n  };\n  return LazyRenderBox;\n}(React.Component);\nexport default LazyRenderBox;","map":null,"metadata":{},"sourceType":"module"}