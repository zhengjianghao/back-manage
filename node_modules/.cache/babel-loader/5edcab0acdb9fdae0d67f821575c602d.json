{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\nexports.toArray = toArray;\nexports.getActiveIndex = getActiveIndex;\nexports.getActiveKey = getActiveKey;\nexports.setTransform = setTransform;\nexports.isTransform3dSupported = isTransform3dSupported;\nexports.setTransition = setTransition;\nexports.getTransformPropValue = getTransformPropValue;\nexports.isVertical = isVertical;\nexports.getTransformByIndex = getTransformByIndex;\nexports.getMarginStyle = getMarginStyle;\nexports.getStyle = getStyle;\nexports.setPxStyle = setPxStyle;\nexports.getDataAttr = getDataAttr;\nexports.getLeft = getLeft;\nexports.getTop = getTop;\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nfunction toArray(children) {\n  // allow [c,[a,b]]\n  var c = [];\n  _react2['default'].Children.forEach(children, function (child) {\n    if (child) {\n      c.push(child);\n    }\n  });\n  return c;\n}\nfunction getActiveIndex(children, activeKey) {\n  var c = toArray(children);\n  for (var i = 0; i < c.length; i++) {\n    if (c[i].key === activeKey) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction getActiveKey(children, index) {\n  var c = toArray(children);\n  return c[index].key;\n}\nfunction setTransform(style, v) {\n  style.transform = v;\n  style.webkitTransform = v;\n  style.mozTransform = v;\n}\nfunction isTransform3dSupported(style) {\n  return ('transform' in style || 'webkitTransform' in style || 'MozTransform' in style) && window.atob;\n}\nfunction setTransition(style, v) {\n  style.transition = v;\n  style.webkitTransition = v;\n  style.MozTransition = v;\n}\nfunction getTransformPropValue(v) {\n  return {\n    transform: v,\n    WebkitTransform: v,\n    MozTransform: v\n  };\n}\nfunction isVertical(tabBarPosition) {\n  return tabBarPosition === 'left' || tabBarPosition === 'right';\n}\nfunction getTransformByIndex(index, tabBarPosition) {\n  var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ltr';\n  var translate = isVertical(tabBarPosition) ? 'translateY' : 'translateX';\n  if (!isVertical(tabBarPosition) && direction === 'rtl') {\n    return translate + '(' + index * 100 + '%) translateZ(0)';\n  }\n  return translate + '(' + -index * 100 + '%) translateZ(0)';\n}\nfunction getMarginStyle(index, tabBarPosition) {\n  var marginDirection = isVertical(tabBarPosition) ? 'marginTop' : 'marginLeft';\n  return (0, _defineProperty3['default'])({}, marginDirection, -index * 100 + '%');\n}\nfunction getStyle(el, property) {\n  return +window.getComputedStyle(el).getPropertyValue(property).replace('px', '');\n}\nfunction setPxStyle(el, value, vertical) {\n  value = vertical ? '0px, ' + value + 'px, 0px' : value + 'px, 0px, 0px';\n  setTransform(el.style, 'translate3d(' + value + ')');\n}\nfunction getDataAttr(props) {\n  return Object.keys(props).reduce(function (prev, key) {\n    if (key.substr(0, 5) === 'aria-' || key.substr(0, 5) === 'data-' || key === 'role') {\n      prev[key] = props[key];\n    }\n    return prev;\n  }, {});\n}\nfunction toNum(style, property) {\n  return +style.getPropertyValue(property).replace('px', '');\n}\nfunction getTypeValue(start, current, end, tabNode, wrapperNode) {\n  var total = getStyle(wrapperNode, 'padding-' + start);\n  if (!tabNode || !tabNode.parentNode) {\n    return total;\n  }\n  var childNodes = tabNode.parentNode.childNodes;\n  Array.prototype.some.call(childNodes, function (node) {\n    var style = window.getComputedStyle(node);\n    if (node !== tabNode) {\n      total += toNum(style, 'margin-' + start);\n      total += node[current];\n      total += toNum(style, 'margin-' + end);\n      if (style.boxSizing === 'content-box') {\n        total += toNum(style, 'border-' + start + '-width') + toNum(style, 'border-' + end + '-width');\n      }\n      return false;\n    }\n\n    // We need count current node margin\n    // ref: https://github.com/react-component/tabs/pull/139#issuecomment-431005262\n    total += toNum(style, 'margin-' + start);\n    return true;\n  });\n  return total;\n}\nfunction getLeft(tabNode, wrapperNode) {\n  return getTypeValue('left', 'offsetWidth', 'right', tabNode, wrapperNode);\n}\nfunction getTop(tabNode, wrapperNode) {\n  return getTypeValue('top', 'offsetHeight', 'bottom', tabNode, wrapperNode);\n}","map":null,"metadata":{},"sourceType":"script"}