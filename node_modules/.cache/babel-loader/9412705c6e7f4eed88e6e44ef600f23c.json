{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ContentBlock\n * @format\n * \n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar CharacterMetadata = require('./CharacterMetadata');\nvar Immutable = require('immutable');\nvar findRangesImmutable = require('./findRangesImmutable');\nvar List = Immutable.List,\n  Map = Immutable.Map,\n  OrderedSet = Immutable.OrderedSet,\n  Record = Immutable.Record,\n  Repeat = Immutable.Repeat;\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n  key: '',\n  type: 'unstyled',\n  text: '',\n  characterList: List(),\n  depth: 0,\n  data: Map()\n};\nvar ContentBlockRecord = Record(defaultRecord);\nvar decorateCharacterList = function decorateCharacterList(config) {\n  if (!config) {\n    return config;\n  }\n  var characterList = config.characterList,\n    text = config.text;\n  if (text && !characterList) {\n    config.characterList = List(Repeat(CharacterMetadata.EMPTY, text.length));\n  }\n  return config;\n};\nvar ContentBlock = function (_ContentBlockRecord) {\n  _inherits(ContentBlock, _ContentBlockRecord);\n  function ContentBlock(config) {\n    _classCallCheck(this, ContentBlock);\n    return _possibleConstructorReturn(this, _ContentBlockRecord.call(this, decorateCharacterList(config)));\n  }\n  ContentBlock.prototype.getKey = function getKey() {\n    return this.get('key');\n  };\n  ContentBlock.prototype.getType = function getType() {\n    return this.get('type');\n  };\n  ContentBlock.prototype.getText = function getText() {\n    return this.get('text');\n  };\n  ContentBlock.prototype.getCharacterList = function getCharacterList() {\n    return this.get('characterList');\n  };\n  ContentBlock.prototype.getLength = function getLength() {\n    return this.getText().length;\n  };\n  ContentBlock.prototype.getDepth = function getDepth() {\n    return this.get('depth');\n  };\n  ContentBlock.prototype.getData = function getData() {\n    return this.get('data');\n  };\n  ContentBlock.prototype.getInlineStyleAt = function getInlineStyleAt(offset) {\n    var character = this.getCharacterList().get(offset);\n    return character ? character.getStyle() : EMPTY_SET;\n  };\n  ContentBlock.prototype.getEntityAt = function getEntityAt(offset) {\n    var character = this.getCharacterList().get(offset);\n    return character ? character.getEntity() : null;\n  };\n\n  /**\n   * Execute a callback for every contiguous range of styles within the block.\n   */\n\n  ContentBlock.prototype.findStyleRanges = function findStyleRanges(filterFn, callback) {\n    findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);\n  };\n\n  /**\n   * Execute a callback for every contiguous range of entities within the block.\n   */\n\n  ContentBlock.prototype.findEntityRanges = function findEntityRanges(filterFn, callback) {\n    findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);\n  };\n  return ContentBlock;\n}(ContentBlockRecord);\nfunction haveEqualStyle(charA, charB) {\n  return charA.getStyle() === charB.getStyle();\n}\nfunction haveEqualEntity(charA, charB) {\n  return charA.getEntity() === charB.getEntity();\n}\nmodule.exports = ContentBlock;","map":null,"metadata":{},"sourceType":"script"}