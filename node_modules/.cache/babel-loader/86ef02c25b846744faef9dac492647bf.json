{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFullKeyList = getFullKeyList;\nexports.calcRangeKeys = calcRangeKeys;\nexports.convertDirectoryKeysToNodes = convertDirectoryKeysToNodes;\nexports.getFullKeyListByTreeData = getFullKeyListByTreeData;\nvar _util = require(\"rc-tree/lib/util\");\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nvar Record;\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {})); // TODO: Move this logic into `rc-tree`\n\nfunction traverseNodesKey(rootChildren, callback) {\n  var nodeList = (0, _util.getNodeChildren)(rootChildren) || [];\n  function processNode(node) {\n    var key = node.key,\n      children = node.props.children;\n    if (callback(key, node) !== false) {\n      traverseNodesKey(children, callback);\n    }\n  }\n  nodeList.forEach(processNode);\n}\nfunction getFullKeyList(children) {\n  var _convertTreeToEntitie = (0, _util.convertTreeToEntities)(children),\n    keyEntities = _convertTreeToEntitie.keyEntities;\n  return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\nfunction calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n  if (!startKey || !endKey) {\n    return [];\n  }\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n  traverseNodesKey(rootChildren, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n    return true;\n  });\n  return keys;\n}\nfunction convertDirectoryKeysToNodes(rootChildren, keys) {\n  var restKeys = _toConsumableArray(keys);\n  var nodes = [];\n  traverseNodesKey(rootChildren, function (key, node) {\n    var index = restKeys.indexOf(key);\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n    return !!restKeys.length;\n  });\n  return nodes;\n}\nfunction getFullKeyListByTreeData(treeData) {\n  var keys = [];\n  (treeData || []).forEach(function (item) {\n    keys.push(item.key);\n    if (item.children) {\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(getFullKeyListByTreeData(item.children)));\n    }\n  });\n  return keys;\n}","map":null,"metadata":{},"sourceType":"script"}