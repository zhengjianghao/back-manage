{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport Portal from \"rc-util/es/PortalWrapper\";\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Child from './DrawerChild';\nvar DrawerWrapper = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DrawerWrapper, _React$Component);\n  function DrawerWrapper(props) {\n    var _this;\n    _classCallCheck(this, DrawerWrapper);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DrawerWrapper).call(this, props));\n    _this.onHandleClick = function (e) {\n      var _this$props = _this.props,\n        onHandleClick = _this$props.onHandleClick,\n        $open = _this$props.open;\n      if (onHandleClick) {\n        onHandleClick(e);\n      }\n      if (typeof $open === 'undefined') {\n        var _open = _this.state.open;\n        _this.setState({\n          open: !_open\n        });\n      }\n    };\n    _this.onClose = function (e) {\n      var _this$props2 = _this.props,\n        onClose = _this$props2.onClose,\n        open = _this$props2.open;\n      if (onClose) {\n        onClose(e);\n      }\n      if (typeof open === 'undefined') {\n        _this.setState({\n          open: false\n        });\n      }\n    };\n    var open = typeof props.open !== 'undefined' ? props.open : !!props.defaultOpen;\n    _this.state = {\n      open: open\n    };\n    if ('onMaskClick' in props) {\n      console.warn('`onMaskClick` are removed, please use `onClose` instead.');\n    }\n    return _this;\n  }\n  _createClass(DrawerWrapper, [{\n    key: \"render\",\n    // tslint:disable-next-line:member-ordering\n    value: function render() {\n      var _this2 = this;\n      var _this$props3 = this.props,\n        defaultOpen = _this$props3.defaultOpen,\n        getContainer = _this$props3.getContainer,\n        wrapperClassName = _this$props3.wrapperClassName,\n        forceRender = _this$props3.forceRender,\n        handler = _this$props3.handler,\n        props = _objectWithoutProperties(_this$props3, [\"defaultOpen\", \"getContainer\", \"wrapperClassName\", \"forceRender\", \"handler\"]);\n      var open = this.state.open; // 渲染在当前 dom 里；\n\n      if (!getContainer) {\n        return React.createElement(\"div\", {\n          className: wrapperClassName,\n          ref: function ref(c) {\n            _this2.dom = c;\n          }\n        }, React.createElement(Child, Object.assign({}, props, {\n          open: open,\n          handler: handler,\n          getContainer: function getContainer() {\n            return _this2.dom;\n          },\n          onClose: this.onClose,\n          onHandleClick: this.onHandleClick\n        })));\n      } // 如果有 handler 为内置强制渲染；\n\n      var $forceRender = !!handler || forceRender;\n      return React.createElement(Portal, {\n        visible: open,\n        forceRender: $forceRender,\n        getContainer: getContainer,\n        wrapperClassName: wrapperClassName\n      }, function (_ref) {\n        var visible = _ref.visible,\n          afterClose = _ref.afterClose,\n          rest = _objectWithoutProperties(_ref, [\"visible\", \"afterClose\"]);\n        return (\n          // react 15，componentWillUnmount 时 Portal 返回 afterClose, visible.\n          React.createElement(Child, Object.assign({}, props, rest, {\n            open: visible !== undefined ? visible : open,\n            afterVisibleChange: afterClose !== undefined ? afterClose : props.afterVisibleChange,\n            handler: handler,\n            onClose: _this2.onClose,\n            onHandleClick: _this2.onHandleClick\n          }))\n        );\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, _ref2) {\n      var prevProps = _ref2.prevProps;\n      var newState = {\n        prevProps: props\n      };\n      if (typeof prevProps !== 'undefined' && props.open !== prevProps.open) {\n        newState.open = props.open;\n      }\n      return newState;\n    }\n  }]);\n  return DrawerWrapper;\n}(React.Component);\nDrawerWrapper.defaultProps = {\n  prefixCls: 'drawer',\n  placement: 'left',\n  getContainer: 'body',\n  defaultOpen: false,\n  level: 'all',\n  duration: '.3s',\n  ease: 'cubic-bezier(0.78, 0.14, 0.15, 0.86)',\n  onChange: function onChange() {},\n  afterVisibleChange: function afterVisibleChange() {},\n  handler: React.createElement(\"div\", {\n    className: \"drawer-handle\"\n  }, React.createElement(\"i\", {\n    className: \"drawer-handle-icon\"\n  })),\n  showMask: true,\n  maskClosable: true,\n  maskStyle: {},\n  wrapperClassName: '',\n  className: '',\n  keyboard: true,\n  forceRender: false\n};\nexport default polyfill(DrawerWrapper);","map":null,"metadata":{},"sourceType":"module"}